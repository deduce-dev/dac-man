version: '3'

services:
#  broker:
#    image: redis:latest
#    restart: always
#    container_name: dacman_broker
#    volumes:
#      - dacman_data:/data
#    ports:
#      - "6378:6379"

  source:
    image: aaelbashandy/dacman-source:0.12
    restart: "no"
    container_name: dacman_data_source
    volumes:
      - dacman_data_scratch:/data
    entrypoint: python3 dacman_stream.py ${REDIS_HOST} ${REDIS_PORT} ${DATASET} ${STREAMING_TIME} ${MAX_JOB_NUM} ${DATA_FRACTION} ${SOURCE_RESULT_DIR}
#    depends_on:
#      - broker

  worker:
    image: aaelbashandy/dacman-worker:0.11
    restart: "no"
    #container_name: dacman_worker
    #links:
    #  - "source:source"
    volumes:
      - dacman_data_scratch:/data
    entrypoint: python3 stream_worker.py ${REDIS_HOST} ${REDIS_PORT} ${TASK_QUEUE} ${WORKER_WAIT_TIME} ${WORKER_RESULT_DIR}
    #entrypoint: bash -c "while ping -c1 source &>/dev/null; do sleep 1; done; python3 stream_worker.py ${REDIS_HOST} ${REDIS_PORT} ${TASK_QUEUE} ${WORKER_WAIT_TIME} ${WORKER_RESULT_DIR}"
    #depends_on:
    #  - source
    #  - broker

volumes:
  dacman_data_scratch:
    external: true

# example of volume creating
#volumes:
#  dbdata:
#    driver: local
#    driver_opts:
#      type: 'none'
#      o: 'bind' # this is important if you want to bind a volume to a specific path
#      device: '/srv/db-data'